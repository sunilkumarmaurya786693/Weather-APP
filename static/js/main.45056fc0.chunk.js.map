{"version":3,"sources":["icons/humidity .svg","icons/wind.svg","icons sync /^/.//.*/.svg$","icons/01d.svg","icons/01n.svg","icons/02d.svg","icons/02n.svg","icons/03d.svg","icons/03n.svg","icons/04d.svg","icons/04n.svg","icons/09d.svg","icons/09n.svg","icons/10d.svg","icons/10n.svg","icons/11d.svg","icons/11n.svg","icons/13d.svg","icons/13n.svg","icons/50d.svg","icons/50n.svg","icons/vision.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","App","useState","cityName","setCityName","weatherIconId","setWeatherIconId","temperature","setTemperature","tempType","description","setDescription","country","setCountry","windspeed","setWindSpeed","setVisibility","humidity","setHumidity","className","onClick","document","getElementById","innerText","api","fetch","then","data","json","isEmpty","weather","icon","Math","floor","main","temp","sys","wind","speed","visibility","handleCityName","contenteditable","src","require","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45056fc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/humidity .e4d37656.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.20dcef3a.svg\";","var map = {\n\t\"./01d.svg\": 17,\n\t\"./01n.svg\": 18,\n\t\"./02d.svg\": 19,\n\t\"./02n.svg\": 20,\n\t\"./03d.svg\": 21,\n\t\"./03n.svg\": 22,\n\t\"./04d.svg\": 23,\n\t\"./04n.svg\": 24,\n\t\"./09d.svg\": 25,\n\t\"./09n.svg\": 26,\n\t\"./10d.svg\": 27,\n\t\"./10n.svg\": 28,\n\t\"./11d.svg\": 29,\n\t\"./11n.svg\": 30,\n\t\"./13d.svg\": 31,\n\t\"./13n.svg\": 32,\n\t\"./50d.svg\": 33,\n\t\"./50n.svg\": 34,\n\t\"./humidity .svg\": 3,\n\t\"./vision.svg\": 35,\n\t\"./wind.svg\": 4\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/01d.a0404ecc.svg\";","module.exports = __webpack_public_path__ + \"static/media/01n.29abd3fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/02d.65db4c42.svg\";","module.exports = __webpack_public_path__ + \"static/media/02n.7835b447.svg\";","module.exports = __webpack_public_path__ + \"static/media/03d.8e5d988e.svg\";","module.exports = __webpack_public_path__ + \"static/media/03n.1370a63e.svg\";","module.exports = __webpack_public_path__ + \"static/media/04d.ce2b30bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/04n.ce2b30bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/09d.c2d0aafe.svg\";","module.exports = __webpack_public_path__ + \"static/media/09n.c2d0aafe.svg\";","module.exports = __webpack_public_path__ + \"static/media/10d.d6fe6255.svg\";","module.exports = __webpack_public_path__ + \"static/media/10n.d6fe6255.svg\";","module.exports = __webpack_public_path__ + \"static/media/11d.80c60763.svg\";","module.exports = __webpack_public_path__ + \"static/media/11n.80c60763.svg\";","module.exports = __webpack_public_path__ + \"static/media/13d.041ad5ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/13n.041ad5ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/50d.d4db296d.svg\";","module.exports = __webpack_public_path__ + \"static/media/50n.f640a588.svg\";","module.exports = __webpack_public_path__ + \"static/media/vision.ab624182.svg\";","import React ,{useState} from 'react';\nimport {isEmpty} from 'lodash'\nimport './App.css';\n\n\nconst App= () => {\n  const [cityName,setCityName]=useState('varanasi');\n  const [weatherIconId,setWeatherIconId]=useState('01n');\n  const [temperature,setTemperature]=useState('300');\n  const [tempType,setTempType]=useState('C');\n  const [description,setDescription]=useState('haze');\n  const [country,setCountry]=useState('In');\n  const [windspeed ,setWindSpeed]=useState('50');\n  const [visibility,setVisibility]=useState('30');\n  const [humidity,setHumidity]=useState('20');\n  const handleCityName=()=>{\n    setCityName(document.getElementById('cityName').innerText);\n    const api=`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=1f80bb9b36778fd0fafca50fcef0abf9`\n    fetch(api).then(data=>data.json()).then((data)=>{\n      if(isEmpty(data))return;\n      setWeatherIconId(data.weather[0].icon);\n      setTemperature(Math.floor(data.main.temp-273));\n      setDescription(data.weather[0].description);\n      setCountry(data.sys.country);\n      setWindSpeed(Math.floor(data.wind.speed));\n      setVisibility(data.visibility);\n      setHumidity(data.main.humidity);\n\n      // console.log(cityName,weatherIconId,temperature,tempType,description,country,windspeed,visibility,humidity);\n\n\n    })\n  }\n  return(<>\n    <div className=\"container\">\n    <div className=\"weatherData\">\n    <div className=\"weather\">Weather</div>\n    <div className=\"citynameContainer\">\n    <div id=\"cityName\" onClick={()=>handleCityName()} contenteditable=\"true\">\n          {cityName}\n          {/* {console.log(cityName)} */}\n    </div>\n    \n    <div className=\"weatherIcon\">\n    \n    <span><img  className=\"weatherIcon\" src={require(`./icons/${weatherIconId}.svg`)}/></span>\n    \n    </div>\n    <div>\n      <span className=\"temperature\">{temperature}Â°</span> \n      <span className=\"tempType\">{tempType}</span>\n    </div>\n    <div className=\"description tempType\">\n      {description}\n    </div>\n    <div className=\"windspeed tempType \">\n    <span><img  className=\"windSpeedIcon\" src={require('./icons/wind.svg')}/></span>\n      <span>{windspeed}</span>\n    </div>\n    {/* this is visibility */}\n    {/* <div className=\"windspeed tempType \">\n    <span><img  className=\"windSpeedIcon\" src={require('./icons/vision.svg')}/></span>\n      <span>{visibility}</span>\n    </div> */}\n    {/* this is humidity */}\n    <div className=\"windspeed tempType humidity\">\n    <span><img  className=\"humidityIcon\" src={require('./icons/humidity .svg')}/></span>\n      <span>{humidity}</span>\n    </div>\n    <div className=\"cityCountry\">\n      {cityName} {country}\n    </div>\n    </div>\n    </div>\n    </div>\n  </>);\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}